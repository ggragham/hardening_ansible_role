---
- name: Install firewall
  block:
    - name: Check firewall binaries
      command: which {{ item.bin }}
      register: firewall_check_results
      loop: '{{ firewall_bins }}'
      loop_control:
        label: '{{ item.name }}'
      vars:
        firewall_bins:
          - {name: ufw, bin: ufw}
          - {name: firewalld, bin: firewall-cmd}
          - {name: iptables, bin: iptables}
      changed_when: false
      ignore_errors: true
      become: true

    - name: Set list of installed firewall backends
      set_fact:
        installed_firewalls: >-
          {{
            firewall_check_results.results
            | selectattr('rc', 'equalto', 0)
            | map(attribute='item.name')
            | list
          }}

    - name: Fail if no firewall backend is available and none specified
      fail:
        msg: >
          No firewall backend detected and none was explicitly provided.
          Please set HARDENING_FIREWALL_BACKEND to one of: ufw, firewalld, iptables.
      when: installed_firewalls | length == 0 and (HARDENING_FIREWALL_BACKEND | length == 0)

    - name: Should install firewall?
      set_fact:
        should_install_firewall: >-
          {{
            HARDENING_FIREWALL_BACKEND | length > 0 and (
              installed_firewalls == [] or
              (
                installed_firewalls == ['iptables'] and
                HARDENING_FIREWALL_BACKEND != 'iptables'
              )
            )
          }}

    # - name: DEBUG
    #   debug:
    #     msg: |
    #       >> SHOULD INSTALL FIREWALL?: {{ should_install_firewall }}
    #       >> FIREWALL BACKEND REQUESTED: {{ HARDENING_FIREWALL_BACKEND }}
    #       >> INSTALLED FIREWALLS: {{ installed_firewalls }}

    - name: Install requested firewall backend
      block:
        - name: Install firewall to Debian-based distro
          apt:
            name: '{{ HARDENING_FIREWALL_BACKEND }}'
            state: latest
            update_cache: true
          when: ansible_os_family == 'Debian'
        - name: Install firewall to RedHat-based distro
          dnf:
            name: '{{ HARDENING_FIREWALL_BACKEND }}'
            state: latest
            update_cache: true
            install_weak_deps: false
          when: ansible_os_family == 'RedHat'
        - name: Mark which firewall was just installed
          set_fact:
            installed_firewall_backend: '{{ HARDENING_FIREWALL_BACKEND }}'
      become: true
      when: should_install_firewall

    - name: Determine effective firewall backend
      set_fact:
        firewall_backend: >-
          {{
            installed_firewall_backend
            | default(installed_firewalls[0] | default(''))
          }}

- name: Configure default UFW rules
  block:
    - name: Disable ufw IPv6
      lineinfile:
        dest: /etc/default/ufw
        regexp: ^IPV6=
        line: IPV6=no
        state: present
      become: true
      when: HARDENING_FIREWALL_DISABLE_IPV6

    - name: Reset UFW rules
      ufw:
        state: reset
      become: true
      when: HARDENING_FIREWALL_RESET

    - name: Open SSH port
      ufw:
        rule: allow
        port: '{{ HARDENING_FIREWALL_SSH_PORT }}'
        proto: tcp
      become: true
      when: HARDENING_FIREWALL_OPEN_SSH_PORT

    - name: Enable UFW
      ufw:
        state: enabled
      become: true

  when: firewall_backend == 'ufw'

- name: Configure default firewalld rules
  block:
    - name: Ensure firewalld is started
      systemd:
        name: firewalld
        state: started
        enabled: true
      become: true

    - name: Remove default zone
      firewalld:
        zone: default
        state: absent
        permanent: true
      become: true
      when: HARDENING_FIREWALL_RESET

    - name: Create default zone
      firewalld:
        zone: default
        state: present
        permanent: true
      become: true

    - name: Set DROP target to default zone
      firewalld:
        zone: default
        target: DROP
        permanent: true
        state: present
      become: true

    - name: Allow SSH on default zone
      firewalld:
        zone: default
        port: '{{ HARDENING_SSH_PORT }}/tcp'
        permanent: true
        state: enabled
      become: true
      when: HARDENING_FIREWALL_OPEN_SSH_PORT

    - name: Add interfaces to the default zone
      firewalld:
        zone: default
        interface: '{{ firewalld_interface }}'
        permanent: true
        state: enabled
      loop_control:
        loop_var: firewalld_interface
      loop: '{{ HARDENING_FIREWALL_INTERFACE_LIST }}'
      become: true

    - name: Reload firewalld to apply changes
      command: firewall-cmd --reload
      become: true

    - name: Set default zone to default
      block:
        - name: Check current default firewalld zone
          command: firewall-cmd --get-default-zone
          register: current_zone
          become: true

        - name: Set default zone if not already set
          command: firewall-cmd --set-default-zone=default
          when: current_zone.stdout != "default"
          become: true

        - name: Reload firewalld initially to apply other changes
          command: firewall-cmd --reload
          when: current_zone.stdout != "default"
          become: true

  when: firewall_backend == 'firewalld'

- name: Configure default iptables rules
  block:
    - name: Configure iptables on Debian-based distro
      vars:
        iptables_rules_path: /etc/iptables/rules.v4
      block:
        - name: Install iptables-persistent
          apt:
            name: iptables-persistent
            state: latest
            update_cache: true
          become: true

        - name: Deploy iptables config
          template:
            src: firewall_iptables.rules.j2
            dest: '{{ iptables_rules_path }}'
            mode: '0600'
          become: true

        - name: Apply iptables rules from config
          community.general.iptables_state:
            state: restored
            path: '{{ iptables_rules_path }}'
          async: '{{ ansible_timeout }}'
          poll: 0
          become: true
      when: ansible_os_family == 'Debian'

    - name: Configure iptables on RedHat-based distro
      vars:
        iptables_rules_path: /etc/sysconfig/iptables
      block:
        - name: Install iptables-services
          dnf:
            name: iptables-services
            state: latest
            update_cache: true
            install_weak_deps: false
          become: true

        - name: Deploy iptables config
          template:
            src: firewall_iptables.rules.j2
            dest: '{{ iptables_rules_path }}'
            mode: '0600'
          become: true

        - name: Apply iptables rules from config
          community.general.iptables_state:
            state: restored
            path: '{{ iptables_rules_path }}'
          async: '{{ ansible_timeout }}'
          poll: 0
          become: true
      when: ansible_os_family == 'RedHat'

  when: firewall_backend == 'iptables'
